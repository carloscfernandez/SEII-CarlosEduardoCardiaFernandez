Processos

Processo é uma instância rodando em um programa, podendo haver mais de um processo simultâneo. Isso se deve as características dos programas.

3.1 Olhando para um processo

3.1.1 IDs de Processo:

Cada processo em Linux é identificado por um único ID (o mesmo processo invocado diferentes vezes possuem diferentes ID), constituído por 16 bits endereçados sequencialmente pelo Linux a cada novo processo criado. Ainda, pode-se afirmar que todo processo, com exceção do processo zumbi, tem um processo pai.

3.1.2 Vendo processos ativos:

O comando ps mostra quais os processos estão rodando no sistema no momento. O -e pede para que mostre todos os programas rodando, o -o solicita informações específicas de ps.

3.1.3 Matando um processo:

Para matar/parar o processo rodando utiliza-se o comando kill e especifica-se o ID do processo.

3.2 Criando processos:

3.2.1 Usando system:

O comando system executa de forma fácil o comando de um programa.

3.2.2 Usando fork e exec:

A função fork cria um programa filho que é uma cópia do pai. O exec para um processo e executa outro. Para diferenciar o programa filho do pai utiliza-se o getpid

3.2.3 Agendamento de processos:

O Linux agenda os processos pai e filho independentemente; não há garantia de qual será executado primeiro, ou por quanto tempo ele será executado antes que o Linux o interrompa e deixe o outro processo (ou algum outro processo no sistema) é executado. Há a possibilidade de dar uma ordem de importância com o comando nice.

3.3 Sinais:

Um sinal é uma mensagem especial enviada a um processo. Os sinais são assíncronos; quando um processo recebe um sinal, ele processa o sinal imediatamente, sem terminar a função atual ou mesmo a linha de código atual. Existem várias dezenas de sinais diferentes, cada um com um significado diferente. Cada tipo de sinal é especificado por seu número de sinal, mas em programas, você geralmente se refere a um sinal pelo nome.

3.4 Terminação de Processos:

Normalmente, um processo termina de duas maneiras. Ou o programa em execução chama a função exit, ou a função main do programa retorna. Cada processo tem uma saída código: um número que o processo retorna ao seu pai.

3.4.1 Esperando a terminação de um processo:

Em algumas situações é desejável que o processo pai espere até que um ou mais dos processos filhos sejam completados. Para isso, é possível usar a família de funções wait.

3.4.2 O sistema wait:

A função wait serve para bloquear a chamada do processo até que um dos processos filho encerre, ou algum erro ocorra.

3.4.3 Processos Zumbi:

Se um processo filho terminar enquanto o processo pai não chamou a função wait, o processo filho se torna um processo zumbi.

3.4.4 Limpando processos filho de forma assíncrona:

Caso haja a necessidade de limpar os processos filho que forem completados para que não haja processos zumbi, é possível realizar isso através das chamadas wait3 ou wait4.
